############################ Network Services Checks #####################################
apply Service "check_flowd" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_flowd"
    vars.ARG1 = "flowd"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}

apply Service "vsrx_activesessions" {
    import "ns-service"
    check_interval = 30s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "activesessions"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}

apply Service "vsrx_failedsessions" {
    import "ns-service"
    check_interval = 30s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "failedsessions"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}

apply Service "vsrx_system_uptime" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "system-uptime"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}
apply Service "system_memory" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "system_mem"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}


apply Service "routing_engine_system_memusage" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "re_system_memusage"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}

apply Service "routing_engine_system_cpu" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "re_system_cpu"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}

apply Service "routing_engine_load_average" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "re_load_avg_one"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}

apply Service "left_net_interface_status" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "left_net_stats"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}


apply Service "right_net_interface_status" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "right_net_stats"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}

apply Service "left_net_interface_input_pckt_rate" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "left_net_input_packets"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}

apply Service "left_net_interface_output_pckt_rate" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "left_net_output_packets"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}

apply Service "right_net_interface_input_pckt_rate" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "right_net_input_packets"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}

apply Service "right_net_interface_output_pckt_rate" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "right_net_output_packets"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type)
}

apply Service "vsrx_nat_config" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "nat_config"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type) && match("*nat*",host.vars.network_type)
}

apply Service "vsrx_firewall_config" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "firewall_config"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type) && match("*firewall*",host.vars.network_type)
}

apply Service "vsrx_utm_config" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "utm_config"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type) && match("*utm*",host.vars.network_type)
}

apply Service "vsrx_dpi_config" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_vsrx_health"
    vars.ARG1 = "dpi_config"
    assign where match("*networkservice*",host.vars.host_type) && match("*vsrx*",host.vars.image_type) && match("*dpi*",host.vars.network_type)
}

apply Service "iptable_status" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_iptable"
    vars.ARG1 = "iptablestatus"
    assign where match("*networkservice*",host.vars.host_type) && match("*lxciptable*",host.vars.image_type)
}
apply Service "iptable_system_uptime" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_iptable"
    vars.ARG1 = "system-uptime"
    assign where match("*networkservice*",host.vars.host_type) && match("*lxciptable*",host.vars.image_type)
}

apply Service "cisco_left_interface_status" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_ciscodvc"
    vars.ARG1 = "left_interface_stats"
    assign where match("*networkservice*",host.vars.host_type) && match("*csr1000v*",host.vars.image_type)
}
apply Service "cisco_right_interface_status" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_ciscodvc"
    vars.ARG1 = "right_interface_stats"
    assign where match("*networkservice*",host.vars.host_type) && match("*csr1000v*",host.vars.image_type)
}
apply Service "cisco_left_input_packets" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_ciscodvc"
    vars.ARG1 = "left_input_packets"
    assign where match("*networkservice*",host.vars.host_type) && match("*csr1000v*",host.vars.image_type)
}
apply Service "cisco_left_output_packets" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_ciscodvc"
    vars.ARG1 = "left_output_packets"
    assign where match("*networkservice*",host.vars.host_type) && match("*csr1000v*",host.vars.image_type)
}
apply Service "cisco_right_input_packets" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_ciscodvc"
    vars.ARG1 = "right_input_packets"
    assign where match("*networkservice*",host.vars.host_type) && match("*csr1000v*",host.vars.image_type)
}
apply Service "cisco_right_output_packets" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_ciscodvc"
    vars.ARG1 = "right_output_packets"
    assign where match("*networkservice*",host.vars.host_type) && match("*csr1000v*",host.vars.image_type)
}
apply Service "cisco_system-uptime" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_ciscodvc"
    vars.ARG1 = "system-uptime"
    assign where match("*networkservice*",host.vars.host_type) && match("*csr1000v*",host.vars.image_type)
}
apply Service "cisco_activesessions" {
    import "ns-service"
    check_interval = 60s
    retry_interval = 30s
    check_command = "check_ciscodvc"
    vars.ARG1 = "activesessions"
    assign where match("*networkservice*",host.vars.host_type) && match("*csr1000v*",host.vars.image_type)
}
